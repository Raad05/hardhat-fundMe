{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"./PriceConverter.sol\";\n\n// errors\nerror NotOwner();\n\ncontract FundMe {\n    address public immutable i_owner;\n\n    AggregatorV3Interface public priceFeed;\n\n    constructor(address _priceFeedAddress) {\n        i_owner = msg.sender;\n        priceFeed = AggregatorV3Interface(_priceFeedAddress);\n    }\n\n    using PriceConverter for uint;\n\n    // gas optimization\n    uint public constant MIN_USD = 20 * 1e18;\n\n    address[] public funders;\n    mapping(address => uint) public addressToAmountFunded;\n\n    function sendFund() public payable {\n        require(\n            msg.value.getConversionRates(priceFeed) >= MIN_USD,\n            \"Insufficient fund\"\n        );\n        // add funder\n        funders.push(msg.sender);\n        addressToAmountFunded[msg.sender] += msg.value;\n    }\n\n    function withdrawFund() public onlyOwner {\n        for (uint i = 0; i < funders.length; i++) {\n            address funder = funders[i];\n            addressToAmountFunded[funder] = 0;\n        }\n        funders = new address[](0);\n\n        (bool sent, ) = payable(msg.sender).call{value: address(this).balance}(\n            \"\"\n        );\n        require(sent, \"Failed to transact ETH\");\n    }\n\n    modifier onlyOwner() {\n        // require(msg.sender == i_owner, \"You are not the i_owner\");\n        if (msg.sender != i_owner) {\n            revert NotOwner();\n        }\n        _;\n    }\n\n    receive() external payable {\n        sendFund();\n    }\n\n    fallback() external payable {\n        sendFund();\n    }\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n    function getPrice(\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint) {\n        (, int answer, , , ) = priceFeed.latestRoundData();\n        // ETH price in usd\n        return uint(answer * 1e10);\n    }\n\n    function getConversionRates(\n        uint ethAmount,\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint) {\n        uint ethPrice = getPrice(priceFeed);\n        uint ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\n\n        return ethAmountInUsd;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}